(define (uniq lis)
  (do ((alist '()
	      (let ((x (car lis)))
		(cond ((assoc x alist)
		       => (lambda (p)
			    (set! (cdr p) (+ (cdr p) 1))
			    alist))
		      (else (cons (cons x 1) alist)))))
       (lis lis (cdr lis)))
      ((null? lis) alist)))
