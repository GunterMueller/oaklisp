;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1988 Kevin J. Lang & Barak A. Pearlmutter.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;appropriate types and operations;;;;;;;;;

(define-instance escape-object
  type '(value-stack-offset		;These stack offsets are manipulated
	 context-stack-offset		; only by the micro-engine.

	 saved-wind-count
	 saved-fluid-binding-list)
  (list object))

(%your-top-wired escape-object)

(define-constant %escape-object-length 5)



(define throw
  (add-method ((make operation)
	       (escape-object saved-wind-count saved-fluid-binding-list)
	       tag value)
    (unwind %windings %wind-count saved-wind-count)
;    (set! fluid-binding-list saved-fluid-binding-list)
    (set-current-fluid-bindings saved-fluid-binding-list)
    (%throw tag value)))

(define-constant %throw
  (add-method ((make-open-coded-operation '((throw)) 2 1)
	       (escape-object) tag value)
    (%throw tag value)))

;;; %FILLTAG can never be actually called without losing, only the
;;; open coded version works, so we don't bother with a method for it.

(define-constant %filltag
  (make-open-coded-operation
   (lambda (ignore)
     `((filltag
	,#*filltag-offset)))	;info from the compiler
   1 1))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;how catch should be compiled;;;;;;;;;;;

(define-syntax (native-catch var . body)
  `(%catch
    (let ((,var (%filltag
		 (%allocate escape-object %escape-object-length))))
      (set! ((%slot 3) ,var) %wind-count)
;      (set! ((%slot 4) ,var) fluid-binding-list)
      (set! ((%slot 4) ,var) (get-current-fluid-bindings))
      ,@body)))

(define-syntax (catch v . body)
  `(native-catch ,v
     (let ((,v (lambda (val) (throw ,v val))))
       ,@body)))



;;; The following method occurs in mac-code.  I am showing it here so
;;; that its relationship to the NATIVE-CATCH macro and the %FILLTAG
;;; open coder will be clear.

#||
(add-method (gen-code (ast-catch-node expression) self cont)
  (let ((end-cont (if (eq? cont 'next) (gensym "endcatch") cont)))
    (let* ((body-code
	    (bind ((#*barrier-node
		    (if (eq? cont 'tail)
			#*barrier-node
			(combn-op expression))) ;the LET lambda
		   (#*filltag-offset
		    (1+ (if (eq? cont 'tail)
			    (nguys-to-pop self)
			    0))))
	      (gen-code expression 'tail))))
      (splice
       (list (if (eq? end-cont 'tail) '() (list `(push-cxt ,end-cont)))
	     body-code
	     (if (eq? cont 'next) (list end-cont) '()))))))
||#
