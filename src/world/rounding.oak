;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1988 Kevin J. Lang & Barak A. Pearlmutter

;;; The rounding stuff from R3RS.

(define-instance floor operation)
(define-instance ceiling operation)
(define-instance truncate operation)
(define-instance round operation)


(dolist (op (list floor ceiling truncate round))
  (add-method (op (integer) x) x))

(add-method (floor (fraction the-numerator the-denominator) x)
  (quotientm the-numerator the-denominator))

(add-method (ceiling (fraction the-numerator the-denominator) x)
  (+ (quotientm the-numerator the-denominator) 1))

(add-method (truncate (fraction the-numerator the-denominator) x)
  (quotient the-numerator the-denominator))

;;; This rounds to the nearest integer, breaking ties by rounding to even:
(add-method (round (fraction the-numerator the-denominator) x)
  (let ((f (quotientm the-numerator the-denominator)))
    (cond ((= the-denominator 2)
	   ;; round to even:
	   (if (even? f) f (+ 1 f)))
	  (else
	   (let ((m (modulo the-numerator the-denominator)))
	     (if (< (+ m m) the-denominator)
		 f (+ 1 f)))))))

;;; eof
