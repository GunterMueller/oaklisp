;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1989 Kevin J. Lang & Barak A. Pearlmutter

;;; The following can fail for things that don't inherit from OBJECT,
;;; or that do it in the wrong order.  These anomalous conditions should
;;; probably be detected at type creation time, and cause the type to be
;;; uninstantiable.

(define (type-pred typ)
  (let ((op (make operation)))

    ;; Force delays and check 'em again.
    (add-method (op (forcible) self) (op (force self)))

    ;; Yes for instances of TYP.
    (add-method (op (typ) self) #t)

    ;; No is the default.
    (add-method (op (object) self) #f)

    op))

(define (inverse-type-pred typ)
  (let ((op (make operation)))

    ;; Force delays and check 'em again.
    (add-method (op (forcible) self) (op (force self)))

    ;; No for instances of TYP.
    (add-method (op (typ) self) #f)

    ;; Yes is the default.
    (add-method (op (object) self) #t)

    op))

(define number? (type-pred number))
(define integer? (type-pred integer))
(define fixnum? (type-pred fixnum))

(define symbol? (type-pred symbol))
(define string? (type-pred string))
(define char? (type-pred character))

(define pair? (type-pred pair))
(define list? (type-pred list-type))
(define atom? (inverse-type-pred pair))

(define procedure? (type-pred operation))
(define vector? (type-pred simple-vector))

;null? is defined in subprimitive.oak.
