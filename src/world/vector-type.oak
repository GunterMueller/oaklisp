;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1988 Kevin J. Lang & Barak A. Pearlmutter

;;; The abstract vector type:

(define-instance vector-type coercable-type
  '() (list self-evaluatory-mixin sequence))

(add-method (print (vector-type) self stream)
  (cond ((and #*print-level (= #*print-level 0))
	 (write-char stream #\#))
	(else (write-string "#(" stream)
	      (let ((nmi (- (length self) 1)))
		(bind ((#*print-level (and #*print-level (- #*print-level 1))))
		  (iterate step ((i 0) (l #*print-length))
		    (cond ((and l (= l 0))
			   (write-string "..." stream))
			  ((<= i nmi)
			   (print (nth self i) stream)
			   (cond ((< i nmi)
				  (write-char stream #\space)
				  (step (+ i 1) (and l (- l 1))))))))))
	      (write-char stream #\)))))

;;; eof
