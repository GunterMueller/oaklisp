;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1987 Kevin J. Lang & Barak A. Pearlmutter.

;;; Define a kind of type that can be coerced to.  Such types have a
;;; coercer operation, which can be applied to an instance of some other
;;; type in order to coerce it to this type.  For example, to coerce a
;;; number X to floating point, write ((COERCER FLOAT) X) or, with read
;;; macros, (#^FLOAT X).

;;; This definition goes in "KERNEL" so primitive types can be coercable.
;(define-instance coercable-type type '(co-op) (list type))

(define-constant-instance coercer
  (mix-types oc-mixer (list foldable-mixin settable-operation)))

(add-method (coercer (coercable-type co-op) self)
  co-op)

(add-method ((setter coercer) (coercable-type co-op) self new-op)
  (set! co-op new-op))

;;; eof
