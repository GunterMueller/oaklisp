;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1988 Kevin J. Lang & Barak A. Pearlmutter

;;; This file contains nice macros and functions for doing typical things
;;; with the error system.


;;; This binds a handler to some class of errors.  When such an error
;;; occurs, an appropriate error object is created and the given handler
;;; is then applied to it.  Invoke-debugger is a useful handler when
;;; within some other context which is trying to handle a class
;;; of errors that shouldn't be so handled in a limited dynamic context.

(define-syntax (bind-error-handler (error-type handler) . body)
  `(bind ((#*error-handlers
	   (cons (cons ,error-type ,handler)
		 #*error-handlers)))
     ,@body))


;;; This construct has a number of different variations, depending on how
;;; much stuff you pass in after the error-type, if any.  The simplest form
;;; simply returns #f from the construct if the given type of error occurs.
;;; In more complex forms, if the error occurs the first operation after
;;; the error-type is invoked on the error, and if no error occurs
;;; the other lambda is invoked on the result of the computation.

;;; Syntax: (CATCH-ERRORS (error-type [error-lambda [non-error-lambda]])
;;;		. body)

(define-syntax (catch-errors (error-type . more-stuff) . body)
  (let ((v (genvar)))
    (destructure** more-stuff
      (() `(native-catch ,v
	     (bind-error-handler
		 (,error-type (lambda (err) (throw ,v #f)))
	       ,@body)))
      ((error-lambda)
       `(native-catch ,v
	  (bind-error-handler
	      (,error-type
	       (lambda (err) (throw ,v (,error-lambda err))))
	    ,@body)))
      ((error-lambda noerror-lambda)
       `(native-catch ,v
	  (,noerror-lambda
	   (bind-error-handler
	       (,error-type
		(lambda (err)
		  (throw ,v (,error-lambda err))))
	     ,@body)))))))

;;; eof
