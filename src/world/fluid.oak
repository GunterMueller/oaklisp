;;; Copyright (C) 1987, Kevin J. Lang & Barak A. Pearlmutter.

;;; This file contains code that implements fluid variables.

(define top-level-fluid-binding-list (list (cons nil nil)))


;; The theory is, these are overwritten in multiproc.oak
;(define get-current-fluid-bindings (add-method ((make operation))
;   fluid-binding-list))
;(define set-current-fluid-bindings (add-method ((make operation)
;						new-binding-list)
;   (set! fluid-binding-list new-binding-list)))
;(define add-to-current-fluid-bindings (add-method ((make operation) c-cell)
;   (set! (cdr top-level-fluid-binding-list)
;	 (cons c-cell (cdr top-level-fluid-binding-list)))))
(define get-current-fluid-bindings (add-method ((make operation))
   (let ((z (%load-process)))
     (if (eq? z 0) fluid-binding-list
	 (get-fluid-bindings z)))))

(define set-current-fluid-bindings (add-method ((make operation)
						new-binding-list)
   (let ((z (%load-process)))
     (if (eq? z 0) (set! fluid-binding-list new-binding-list)
	 (set-fluid-bindings z new-binding-list)))))

(define add-to-current-fluid-bindings (add-method ((make operation) c-cell)
   (let ((z (%load-process)))
     (if (eq? z 0) (set! (cdr top-level-fluid-binding-list)
			 (cons c-cell (cdr top-level-fluid-binding-list)))
	 (append! (get-fluid-bindings z) (cons c-cell nil))))))



;;; This is to be called at warm boot time:

(define (revert-fluid-binding-list)
  (set! fluid-binding-list top-level-fluid-binding-list))
;(define (revert-fluid-binding-list)
;  (set-current-fluid-bindings top-level-fluid-binding-list))
;(define (revert-fluid-binding-list)
;  (set-current-fluid-bindings (cons (cons nil nil) nil)))

;;; And at cold boot time too, I suppose:

(revert-fluid-binding-list)

#|
;;; This must be delayed until later in the world building process.
(define-syntax (fluid x)
  `(%fluid ',x))
|#

(define-constant-instance %fluid locatable-operation)

(add-method (%fluid (symbol) sym)
  (iterate aux ()
    (let ((x (%assq sym (get-current-fluid-bindings))))
      (cond (x => cdr)
	    (else (cerror
		   (format #f "Try looking up (FLUID ~S) again." sym)
		   "(FLUID ~S) not found." sym)
		  (aux))))))

(add-method ((setter %fluid) (symbol) sym val)
  (let ((x (%assq sym (get-current-fluid-bindings))))
    (cond (x (set! (cdr x) val))
	  (else (add-to-current-fluid-bindings (cons sym val))
		val))))

(add-method ((locater %fluid) (symbol) sym)
  (iterate aux ()
    (let ((x (%assq sym (get-current-fluid-bindings))))
      (cond (x (make-locative (cdr x)))
	    (else
	     (cerror
	      (format #f "Try looking up (FLUID ~S) again." sym)
	      "Locative to (FLUID ~S) not found." sym)
	     (aux))))))

;;; eof
