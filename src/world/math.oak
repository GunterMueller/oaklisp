;;; Copyright (C) 1987, Barak A. Pearlmutter & Kevin J. Lang.


(define prime-list
  (labels (((prime? n)
	    (iterate aux ((l prime-list))
	      (let* ((i (car l))
		     (n/i (quotient n i)))
		(cond ((< n/i i) #t)
		      ((= (* i n/i) n) #f)
		      (else (aux (cdr l)))))))

	   ((primes-list n)
	    (if (prime? n)
		(lcons n (primes-list (+ 1 n)))
		(primes-list (+ 1 n)))))

    (lcons 2 (primes-list 3))))


(define (factor n)
  (iterate step ((left n) (factors '()) (tries prime-list))
    (let* ((try (car tries))
	   (try-square (* try try)))
      (cond ((= 1 left) factors)
	    ((zero? (modulo left try))
	     (step (quotient left try) (cons try factors) tries))
	    ((> try-square left)
	     (cons left factors))
	    (else
	     (step left factors (cdr tries)))))))


;;; eof
