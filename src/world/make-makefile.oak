;;; Copyright (C) 1988, 1992 Barak A. Pearlmutter & Kevin J. Lang.

(define (make-makefile name)
  (with-open-file (outfile name out)

    (let* ((aller (lambda (x)
		    (format outfile " ~A.oa" (downcase (#^string x)))))
	   (aller1 (lambda (x) (if (not (memq x between-files)) (aller x)))))

      (format outfile "# NOTE: This included makefile data is automatically~%")
      (format outfile "# generated by make-makefile.oak, and should not~%")
      (format outfile "# normally be edited by hand.  It can be regenerated~%")
      (format outfile "# with 'make Makefile-vars'.~%")
      (format outfile "~%")

      (format outfile "COLDFILES =")
      (for-each aller between-files)
      (for-each aller1 all-the-layers)
      (format outfile "~%")

      (format outfile "COLDFILESD =")
      (for-each aller all-the-layers)
      (format outfile "~%")

      (format outfile "MISCFILES =")
      (for-each aller misc-files)
      (format outfile "~%")

      (format outfile "COMPFILES =")
      (for-each aller compiler-files)
      (format outfile "~%")

      (format outfile "RNRSFILES =")
      (for-each aller scheme-files)
      (format outfile "~%")

      (format outfile "TOOLFILES  = tool.oa~%")
      (format outfile "FILESFILES = files.oa~%")
      (format outfile "MAKEFILES  = make-makefile.oa~%")
      (format outfile "~%")
      (format outfile "# These are gravy.  The first two are our standard~%")
      (format outfile "# benchmarks.  The others are neat.~%")
      (format outfile "~%")
      (format outfile "GRAVY = tak.oak compile-bench.oak prolog.oak prolog-examples.oak~%")
      (format outfile "~%")

      (format outfile "# Special rules for the compiler's source~%")
      (format outfile "~%")

      (for-each (lambda (f)
		  (let ((f (downcase (#^string f))))
		    (format outfile
			    "~a.oa:~a.oak;$(OAK) $(OAKFLAGS) -- -locale compiler-locale -compile $* -exit~%"
			    f f)))
		compiler-files)))
  name)
