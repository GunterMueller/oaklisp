;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1987 Kevin J. Lang & Barak A. Pearlmutter

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Define mixin management tools.
;;

(define-instance mixin-manager type '(type-alist) (list object))

(add-method (initialize (mixin-manager type-alist) self)
  (set! type-alist '())
  self)

(define-instance mix-types operation)

(add-method (mix-types (mixin-manager type-alist) self types)
  ;; Run through the list looking for what we want.
  (iterate aux ((l type-alist))
    (if (null? l)
	;; not on list, make it.
	(let ((newtype (make type '() types)))
	  (set! type-alist (cons (cons types newtype) type-alist))
	  newtype)

	;; We want to write test (EQUAL? TYPES (CAAR L)) here, but
	;; EQUAL? doesn't work yet so the comparison is done inline,
	;; element by element.

	(labels ((non-equal-exit (lambda () (aux (cdr l)))))

	  (iterate loop ((x types) (y (caar l)))
	    (cond ((null? x)
		   (if (null? y)
		       ;; They are equal, return the right type:
		       (cdar l)
		       (non-equal-exit)))
		  ((or (null? y)
		       (not (eq? (car x) (car y))))
		   (non-equal-exit))
		  (else (loop (cdr x) (cdr y)))))))))

;;; eof
