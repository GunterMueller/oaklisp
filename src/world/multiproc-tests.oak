;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA



;; regression tests start here...

(process-id (current-process))
(%make-heavyweight-thread start-busy-work)

(define x (make mutex))
(acquire-mutex x)
(release-mutex x)

(define y (delay (+ 1 2)))
(define z (future (+ 1 2)))

(define (test-fn)
  (while t (format t "~s~%" (process-id (current-process)))))
(process-run-fn test-fn nil)
(process-run-fn test-fn nil)
(process-run-fn test-fn nil)
(test-fn)

(set! #*thing 'adf)
#*thing					; Should return symbol ADF

(bind ((#*hello "hello")) #*hello)	; Returns "hello"
#*hello					; Should error

(bind ((#*hello "hello")) (set! #*world "world"))
#*world					; Returns "world"
#*hello					; Should error

(set! #*forcible-print-magic #f)


;;; TO DO

;;; register for # instructions until alarms ?
;;; at least make interval modifiable

;;; change C thread maker so malloc'ed stuff doesn't get into oaklisp space

;;; rationalize process descriptor table C vs Oaklisp interface

;;; process priorities

;;; make threads extra "level" in build process.  Prior to that being
;;; loaded, NO THREAD STUFF AT ALL.

;;; ability to build emulator without thread support

;;; race conditions (symbol tables, hash tables, add-method)

;;; performance

;;; make sure throwing out of thread gets an error


;;; completely rewrite allocation subsystem
