;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;;; Copyright (C) 1986 Kevin J. Lang and Barak A. Pearlmutter

;;; This entry point strips off the arg field that we don't care about
;;; that the emulator stuck on because funcall is an arged
;;; instruction.

(define (no-handler-for-operation n . args)
  (listify-args failed-funcall . args))

;;; Leave autoforcing turned off until the facility actually comes up.

(define forcible-magic #f)

;;; This function actually does the work.

(define (failed-funcall args)
  (destructure (op . args) args
    (cond
     ;; It would be nice if the user level error system could
     ;; handle this:
     ((and forcible-magic
	   ;; IS-A? not used because it might force the promise, and
	   ;; then the promse would end up not getting forced.  Clear?
	   (subtype? (get-type op) forcible))
      (apply (force op) args))
     ((not (is-a? op operation))
      (signal not-an-operation op args))
     ((and (not (null? args))
	   (is-a? op locatable-operation)
	   (has-method? (get-type (car args)) (locater op)))
      (when monitor-for-bruce
	(%write-char #\%))
      (contents (apply (locater op) args)))
     ;; In an ideal world this would be handled at user level:
     ((and forcible-magic (not (null? args))
	   ;; IS-A? not used because it might force the promise, and
	   ;; then the promse would end up not getting forced.  Clear?
	   (subtype? (get-type (car args)) forcible))
      (apply op (force (car args)) (cdr args)))
     (else
      (signal operation-not-found op args)))))

(set! (nth %arged-tag-trap-table 21) no-handler-for-operation)
(set! (nth %arged-tag-trap-table 22) no-handler-for-operation)

;;; This is in direct analogy with the above.

(define (no-^super-handler n . args)
  (listify-args failed-^super . args))

(define (failed-^super args)
  (destructure (the-type op . args) args
    (signal ^super-not-found the-type op args)))

(set! (nth %arged-tag-trap-table 33) no-^super-handler)
(set! (nth %arged-tag-trap-table 34) no-^super-handler)

;;; eof
