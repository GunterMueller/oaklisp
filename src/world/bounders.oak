;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1986 Kevin J. Lang & Barak A. Pearlmutter

(define-instance find-bound-vars operation)

(define-instance find-vars operation)

(define-instance for-each-r operation)

(add-method (for-each-r (eq-hash-table table) self op)
  (let ((op (lambda (x)
	      (op (car x) (cdr x)))))
    (dotimes (i (length table))
      (for-each op (nth table i)))))

(add-method (find-bound-vars (locale variable-table) self val)
  (for-each-r variable-table
	      (lambda (sym cell)
		(when (eq? (contents cell) val)
		  (format #t "~&~A's bound to that.~%" sym)))))

(add-method (find-vars (locale variable-table) self pred?)
  (for-each-r variable-table
	      (lambda (sym cell)
		(when (pred? (contents cell) sym)
		  (format #t "~&~A (~A)~%" sym (contents cell))))))


(define-instance find-sorted-vars operation)

(add-method (find-sorted-vars (locale variable-table) self pred?)
  (let ((outlist nil))
    (for-each-r variable-table
		(lambda (sym cell)
		  (when (pred? (contents cell) sym)
		    (push outlist sym))))
    (sort outlist (lambda (a b)
		    (< (#^string a) (#^string b))))))


(define (find-and-print-sorted-vars locale pred?)
  (dolist (x (find-sorted-vars locale pred?))
    (format #t "~&~A~%" x)))


