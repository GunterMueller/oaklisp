;;; This file is part of Oaklisp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; The GNU GPL is available at http://www.gnu.org/licenses/gpl.html
;;; or from the Free Software Foundation, 59 Temple Place - Suite 330,
;;; Boston, MA 02111-1307, USA


;;; Copyright (C) 1988 Kevin Lang & Barak Pearlmutter, CMU Oaklisp Project.

;;; Dump a table of all the instructions in a format suitable for
;;; compilation into the emulator.

(let ((aux (lambda (s instr i)
	     (format s "	\"~S\"," instr)
	     (if (= (modulo i 10) 0)
		 (format s "		/* ~D */~%" i)
		 (format s "~%")))))

  (define (dump-instruction-table f)

    (let ((t0 (make simple-vector %argless-instructions))
	  (t1 (make simple-vector %arged-instructions)))

      (dolist (x (#^list-type opcode-descriptor-hash-table))
	(destructure* (instr opcode argfield . #t) x
	  (cond ((= opcode 0) (set! (nth t0 argfield) instr))
		(else (set! (nth t1 opcode) instr)))))

      (with-open-file (s f out)

	(format s "// Automatically generated by instruction-table.oak~%~%")

	(format s "char *argless_instr_name[] = {~%")
	(dotimes (i %argless-instructions)
	  (aux s (nth t0 i) i))
	(format s "};~%~%")

	(format s "char *instr_name[] = {~%")
	(dotimes (i %arged-instructions)
	  (aux s (nth t1 i) i))
	(format s "};~%")))))
